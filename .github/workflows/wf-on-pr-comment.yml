name: Workflow - On PR Comment
on: 
    issue_comment:
        types: 
            - created

permissions: write-all

run-name: WF run on comment PR \#${{ github.event.issue.number }} '${{ github.event.issue.title }}' by @${{ github.actor }}

jobs:
  pr_commented:
    # This job only runs for pull request comments
    name: On PR comment
    if: ${{ github.event.issue.pull_request }}
    runs-on: ubuntu-latest
    outputs:
      do_release:   ${{ steps.check-release-comment.outputs.do_release }}
      project:      ${{ steps.check-release-comment.outputs.project }}
      branch:       ${{ steps.check-release-comment.outputs.branch }}
      pull_number:  ${{ steps.check-release-comment.outputs.pull_number }}
      generated_version:      ${{ steps.git-version.outputs.version }}
      version:      ${{ steps.create-tag-name.outputs.new_version }}
      
    steps:          
      - id: check-release-comment
        name: Check for release comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const commentBody = ${{ toJson( github.event.comment.body ) }};
            const isRelease = commentBody.toLowerCase().includes('release:');
            const project = commentBody.match(/release: (.*)$/)?.[1];
            const isOpen = '${{ github.event.issue.state }}' === 'open';
            core.setOutput('comment_id', '${{ github.event.comment.id }}');

            if (isRelease && !project) {
              core.setOutput('do_release', false);

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '> ${{ toJson( github.event.comment.body ) }}\n\n❌ Please provide a project name for the release. Expected format: `Release: <project>`',
              });

              return;
            } else {

              core.setOutput('do_release', isRelease && isOpen);
              core.setOutput('project', project);

              const { data: pullRequest } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
              });
              
              const branchName = pullRequest.head.ref;

              core.warning(`Release comment found for project: ${project}`);
              core.warning(`branch: ${branchName}`);
              core.setOutput('branch', branchName);
              core.setOutput('pull_number', context.issue.number);
              
  
            }

      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.check-release-comment.outputs.branch }}
          fetch-depth: 0

      - name: Git Version
        if: steps.check-release-comment.outputs.do_release == 'true'
        id: git-version
        uses: codacy/git-version@2.8.0
        with:
          release-branch: 'main'
          prefix: 'v'
          log-paths: './'

      - name: Create version tag name
        if: steps.check-release-comment.outputs.do_release == 'true'
        id: create-tag-name
        run: |
            echo "Do release: ${{ steps.check-release-comment.outputs.do_release }}"
            echo "Project: ${{ steps.check-release-comment.outputs.project }}"
            echo "Version: ${{ steps.git-version.outputs.version }}"
            echo "Pull number: ${{ steps.check-release-comment.outputs.pull_number }}"

            string="${{ steps.git-version.outputs.version }}"
            before_dash=$(echo "$string" | cut -d'-' -f1)
            after_dash=$(echo "$string" | cut -d'-' -f2-)

            export NEW_VERSION="${before_dash}-pr-${{ steps.check-release-comment.outputs.pull_number }}-${after_dash}"
            echo "New version: $NEW_VERSION"
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Checkout main
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Create tag
        id: create-tag
        if: steps.check-release-comment.outputs.do_release == 'true'
        uses: ./.github/workflows/tag
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          ref_name: ${{ steps.check-release-comment.outputs.branch }}
          tag_name: ${{ steps.create-tag-name.outputs.new_version }}

      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.check-release-comment.outputs.branch }}
          fetch-depth: 0          

      - name: Build
        uses: ./.github/workflows/build
        if: steps.check-release-comment.outputs.do_release == 'true'
        with:
          ref_name: ${{ steps.create-tag-name.outputs.new_version }}
          project: ${{ steps.check-release-comment.outputs.project }}

      - name: Add reaction the comment
        uses: actions/github-script@v6
        if: success()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            
            const reactionContent = 'rocket'; 
            
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ steps.check-release-comment.outputs.comment_id }},
              content: reactionContent,
            });
            let message = "✅ [Build successful](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}).";

            await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '> ${{ toJson( github.event.comment.body ) }}\n\n' + message,
              });            

      - name: Add reaction the comment on failure
        uses: actions/github-script@v6
        if: failure()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            
            const reactionContent = 'confused'; 
            const tag_existed = ${{ toJson( steps.create-tag.outputs.tag_exists ) }};

            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ steps.check-release-comment.outputs.comment_id }},
              content: reactionContent,
            });

            let message = "❌ [Build failed](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}). Please check the logs.";
            if (tag_existed === 'true') {
              message = "❌ [Build failed](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}). A tag with the same name already exists. Did you push anything to this branch?\nPlease check the logs.";
            }

            await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '> ${{ toJson( github.event.comment.body ) }}\n\n' + message,
              });
