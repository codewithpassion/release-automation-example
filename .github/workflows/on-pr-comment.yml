on: 
    issue_comment:
        types: 
            - created

permissions: write-all
    # contents: read
    # issues: write


jobs:
  pr_commented:
    # This job only runs for pull request comments
    name: PR comment
    if: ${{ github.event.issue.pull_request }}
    runs-on: ubuntu-latest
    steps:
          
      - id: check-release-comment
        name: Check for release comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const commentBody = '${{ github.event.comment.body }}';
            const isRelease = commentBody.toLowerCase().includes('release:');
            const project = commentBody.match(/release: (.*)$/)?.[1];
            const isOpen = '${{ github.event.issue.state }}' === 'open';

            if (isRelease && !project) {
              core.setOutput('do_release', false);

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '> ${{ github.event.comment.body }}\n\n‚ùå Please provide a project name for the release. Expected format: `Release: <project>`',
              });

              return;
            } else {

              core.setOutput('do_release', isRelease && isOpen);
              core.setOutput('project', project);

              const { data: pullRequest } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pullRequestNumber,
              });
              
              const branchName = pullRequest.head.ref;

              core.warning(`Release comment found for project: ${project}`);
              core.warning(`branch: ${branchName}`);
              core.setOutput('branch', branchName);
  
            }
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          ref: main # We checkout main to get the versioning workflow
          fetch-depth: 0

      - name: Generate version ${{  github.ref_name }} - ${{ github.head_ref}}
        id: generate-version
        uses: ./.github/workflows/version
        with:
          branch: ${{  github.ref_name || github.head_ref }}

      - name: Debug
        run: |
            echo "Do release: ${{ steps.check-release-comment.outputs.do_release }}"
            echo "Project: ${{ steps.check-release-comment.outputs.project }}"
            echo "Version: ${{ steps.generate-version.outputs.version }}"
            echo "github info: ${{ toJson(github) }}"
            echo "issue info: ${{ steps.check-release-comment.outputs.issue }}"

      # - name: Create Release
      #   if: steps.check-release-comment.outputs.do_release == 'true'
      #   uses: ./.github/workflows/wc-build-and-release.yml
      #   with:
      #     release-tag: 

      # - name: Add reaction to release
      #   uses: actions/github-script@v6
      #   if: steps.check-release-comment.outputs.do_release == 'true'
      #   env:
      #     COMMENT_ID: ${{ github.event.comment.id }}
      #   with:
      #       github-token: ${{ secrets.GITHUB_TOKEN }}
      #       script: |
      #         const commentId = ${{ env.COMMENT_ID }};
      #         const reactionContent = 'rocket'; // You can change this to any valid reaction type
            
      #         await github.rest.reactions.createForIssueComment({
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           comment_id: commentId,
      #           content: reactionContent,
      #         });          